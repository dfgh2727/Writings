<<TextRPG Last>>

 비주얼 스튜디오도 완벽하지 않다. 

 지역 연결 여부를 확인하는 함수 추가, 연결된 곳이 없으면 터지게 만듦. 
 zone.cpp, 어떻게 연결시킬건가를 생각하고 코딩했다.
 fightzone의 inplayer의 오버라이드 부분 디버깅, 오버라이드를 위해선 virtual 뒤부터 완전히 똑같아야 한다.
 
 사냥터라는 개념은 하나로 만들고 그 내부의 변수를 통해 변화를 주자. 변수(데이터) 주도형으로.
 
 최대 몬스터수와 최소 몬스터수라는 변수를 정했다.
 (원래 값형 멤버변수로 몬스터를 만들지 않는다.)
 Orc 클래스를 만들었다. 
 (Init...준비시킨다는 것, 객체들을 만들고 처음으로 준비시키는 단계 즉,이니셜라이즈 단계. 대부분 딱 한번 한다.) :TextRPG003 World.cpp 참고
 (이름 바꾸기 단축키 crtl R R, 근데 바꾸려다가 에러날 수도 있다. 또 버그가 있어서 안 바뀔수도 있다. 웬만해선 쓰지 말자.)

 (지금 짜고 있는 게임은 orc와 goblin 둘 중 하나만 출현하게 만들었다.)
 오크만 나오는 맵에 오크와 고블린을 둘다 입력한다? 낭비다.
 Monster 포인터로 
 몬스터 타입이 안 정해져도 터지게 만들었다.

 enum에 none을 두는건 실수방지를 위해.
 SetMonsterType 함수를 만들었다.

 enum...swtich ()내부 작성하고 Enter... 자동완성


 <Pure Virtual>
 문법을 어디서 썼나, 왜 썼나를 알아야 한다. 면접에서 물어본다...


 Beginplay, 
 자식이 부모를 호출할거라면 무조건 오버라이드 해라. 부모의 실체가 없으면 에러난다.
 그리고 부모는 자식이 실행했을 때 문제가 생길만한 내용은 쓰지 않는게 좋다.
 보통 BeginPlay();에 class ImageRenderer를 만든다. (자식에 만들지 않는다.)

 Orc의 값들을 정했다. Gold는 랜덤으로. 
 srand는 여러번 할 필요 없으니 core에서.
 Goblin도 정했다.

 char Name 배열 초기화 시키고
 Actor.h에 void Statusrender를 입력했다.


 <동적 할당>
 new를 쓸 때는 조심해야 함...
 필기 내용 잘 읽고 기억하자.

 FightZone.cpp while문으로 statusRender 띄우고 싸우지 않고 break
 CurMonster 지우기. leak 안 남는거 확인했다.


 전투 후 돌아갈 곳이 없다.
 전투 후 마을로 돌아가는 코드 넣기
 (과제를 하긴 했는데 뭔가 코드 내부를 이해하고 있다는 생각은 안 드네;;)
 (진짜 틀렸음;;)

 본격적인 전투 코드 입력 (FightUnit.h와 .cpp)
 UFightUnit 작성
 Actor.cpp는 상속받아서 UObject, UStatusUnit, UFightUnit으로 참조형식으로 형변환 가능하다.  
 (UObject* Ptr = this; 업캐스팅이다.)

 GetDamage()작성, 이전과 다르게 StatusUnit을 상속받지 않기 때문에 return에 함수 째로 넣어서 식을 썼다;;
 BeginPlay로 Init을 불러와야 하는데 아무것도 없어서 터졌다. 내용을 채웠다.

 공격 주고 받는걸 화면에 보이게 만들었다.
 IsDeath()도 만들었다. 그리고 승리하거나 패배하면 while문에서 break.

 사실 Player와 Monster이 둘로 구조를 만드는 것은 좋지 않다. 짤 수 있는 시나리오의 다양성이 떨어진다.
 (플레이어vs몹이 아니라 몹vs몹은 구현할 수 없게 된다.)
 그래서 Left와 Right로 바꿨다...
 
 (Player와 Monster가 class 말단으로 갈 수록 좋다.)

 GetDamage virtual선언, APlayer에 상속

 BeginPlay를 잘 확인해봐라.
