// wrote_250225.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>


// 팹에서 에셋 선택하기
// 파라곤 에셋 ... 용량이 너무 크다. 안 받을 것.
// 팹에서 우측의 필터 - download size 옵션 선택을 통해 크기 범위를 정할 수 있다.
// 버전 확인 ... 코드 에셋은 위험할 수 있다.

// 파일 이동시... 이동하지 않은 파일(이동 불가한 파일)이 남아있을 경우 폴더는 남아있다.

// 애니메이션 작업
// 
// 애님 컴포짓 - 시퀀스를 합칠 수 있다.
// 포즈 - 
// 몽타주 - 코드 기반으로 애니메이션을 제어한다.
// 
// 캐릭터 블루 프린트에 들어가서 
// 디테일 - 애니메이션 - 애니메이션 모드 - Use Animation Asset 으로 애니메이션을 반복재생할 수 있다.
// 
// 애니메이션 블루 프린트는 특정 스켈레탈을 위한 것이다.
// 따라서 하나의 애니메이션 블루 프린트로 여러 스켈레탈에 돌려 쓸 수 없다.
// 메쉬마다 애니메이션 블프를 만들어야 한다.
// 애니메이션 블프 생성 후 스켈레탈을 선택할 수도 있지만
// 스켈레탈 우클릭- 생성 - 애님 블루프린트로 만들 수 있다.
// 
// 재생시키고 싶은 애니메이션을 애님그래프에 연결하자.
// 애니메이션 - 애니메이션 모드 - Use Animation BluePrint를 설정한 후
// 만든 애니메이션 블프를 설정해주자.
// (단, 애니메이션 몽타주는 애니메이션 그래프에서 사용할 수 없다. 따로 설정해야 한다.)
//
// OutputPos 
// 최종적으로 눈에 보이는 pos.
// 
// 애니메이션 몽타주나 애니메이션 컴포짓은 여러개의 애니메이션을 모아서
// 하나의 애니메이션으로 만들 수 있는 통합 편집 에셋이다.
// (연속 액션이 없다면 컴포짓이나 몽타주를 사용할 필요 없다.)
// 노티파이로 효과음이나 특정 시점에 실행시킬 함수를 추가할 수 있다.
// 
// 블렌드?
// 애니메이션을 합쳐서 재생하면 애니메이션 전환시 연속적이지 않고 끊기는 느낌이 든다.
// 이 때 애니메이션을 자연스러운 연결시킬 수 있다.
// 
// 특정 값을 참조하여 그 값에 해당하는 애니메이션을 재생시킨다.
// Active Child Index, Index에 해당하는 애니메이션 재생.
// 코드로 생각해보면 클래스 안에 멤버변수 int나 enum을 가지고 있는 것처럼 생각할 수 있다.
// 그리고 그 값으로 애니메이션을 실행시킨다.
// 
// 비주얼 스튜디오에서 멤버변수로 index를 만들어서 블프에 연결시키면 경고가 뜬다.
// (스레드에 안전한 함수를 사용할 것을 권한다. 폰이나 그래프는 안정성을 보장받지 못한다.)
// 애니메이션 블루프린트에서 만들어진 변수들은 쓰레드 안정성이 보장된다.
// 이벤트 그래프는 CPU, 애님 그래프는 그래픽 카드의 연산이다.
// 
// 반복하고 싶은 애니메이션을 선택하고 - 디테일 - 
// 

// enum (언리얼)
// 블루프린트에서 enum을 만들 수 있지만 
// enum하나당 만들 수 있는 블프는 1개.
// 
// 언리얼에서 enum사용시 반드시 uint8을 사용해야 한다.
// 
 UENUM(BlueprintType)
 enum class EPlayerAnimation : uint8
 {
	Idle UMETA(DisplatName = "서있기"),
	Run UMETA(DisplatName = "뛰기"),
	Attack UMETA(DisplatName = "공격"),
 }
// 한글이 깨질 수 있으므로 UTF-8로 저장하자.

// enum 비트마스킹
// 
// 예를 들어 아래의 경우 8가지 수를 사용할 수 있다.
// 00000001,00000010, ... ,100000000
// 
// Random은 하나만 만들고 돌려쓴다. 
  UPROPERTY(VisibleAnywhere, Catagory = "Data")
  FRandomStream = Random;
  Random.RandomRange(n, m) // n부터 m까지의 수가 나온다.
//
// Cast()
// 언리얼에서 형변환 가능한지 확인하는 함수
//