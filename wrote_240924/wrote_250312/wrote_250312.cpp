// wrote_250312.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>


// RPC 보충
// 
// 클라이언트는 오직 character로만 서버와 소통할 수 있다.
// 가령 네트워크 환경에서 item 같은 것은 서버의 소유이기 때문에 
// 클라이언트가 item에 대한 함수를 실행시키면 서버는 다른 클라이언트와 같으므로 drop된다.

// 애니메이션 (AI)
// 
// 애니메이션 블루프린트(ABP)는 스켈레톤이 다르면 적용시킬 수 없다.
// 즉, 메쉬가 같아야 한다.
// 
// 애니메이션의 갯수와 AIState의 원소 수가 다르면 문제가 생길 수 있다.
// 
// 다양한 애니메이션을 다양한 형태로 재생시키고 싶다면 시퀀스는 사용하지 않는 게 좋다.
// 시퀀스보다 몽타주로 만들자.
// 
// 예시) 
// GMAnimInstance :
// AnimInstance를 부모로 하는 애님 인스턴스 클래스를 만들어보자.
// 
// TMap으로 애님 몽타주를 관리한다. 그리고 애니메이션 종류별로 관리를 한다.
// (Idle에 대한 애님 몽타주 TMap, 공격에 대한 애님 몽타주 TMap...)
// (상체와 하체가 분리된 애니메이션과 같은 복잡한 상태가 아니라는 전제다.
//  만약 한 상태에서 랜덤으로 다양한 애니메이션이 필요한 경우 
//  TMap<key, TArray<AnimMontages*>>와 같이 만들자...)
// 
// 그리고 언리얼에서 애니메이션 시퀀스에 대해서 애님 몽타주를 만들고 저장하자.
// 그리고 Data Table에 상태에 대해서 애님 몽타주를 지정한다. 
// (TMap으로 관리할 애니메이션은 따로 지정 안 한다.)
// 
// 공격 애니메이션의 key를 100이상의 숫자로 설정했다,
// (for문을 돌려서 찾을 때... GmAnimInstance->AnimMontages.Add(100 + i, );)
//
// 
// 


// 
// 
// 
// 
// 
// 
// 
