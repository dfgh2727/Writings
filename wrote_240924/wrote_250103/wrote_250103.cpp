// wrote_250103.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>


// 상수버퍼는 자료구조를 따로 만들어 관리하고 있기 때문에 지우지 않으면 leak 발생 

// RenderUnit이 material을 가지게 만든다.
// 
// 나만의 렌더러를 만들어서 쉐이더들을 확인해보자.
// 기능도 만들어보고.

// Renderer...spriteRenderer든 meshRenderer든 모든 Renderer의 기본적인 기능을 갖추고 있다.
// Renderer를 굳이 바로 쓰지 않는 이유, Mesh나 Material을 일일히 직접 설정해야 한다. 번거롭다.
// 보통 기능을 갖추고 있는 전용 Renderer를 사용한다. 
// 
// 현재 엔진에서 RenderUnit을 만들어야 한다.

// RTV, 백버퍼에서 가져온 색으로 창을 수정할 수 있는 권한

// Depth buffer
// 
// 색깔을 저장하는 색상버퍼와 달리 깊이를 저장하는 버퍼.
// 좌표에 투영행렬을 곱한다. 그 결과로 나온 Z를 W로 나눠준 값 = 깊이 
// 깊이 값은 0~1의 범위를 가진다. 깊이가 범위 안에 존재하면 값이 반영된다.
// 픽셀에 다수의 값이 존재하면 크기 비교를 통해 작은 값이 반영된다.
// 
// 투명하면 depth buffer를 안 쓴다? 
// 아니다. 똑같이 적용된다. 따라서 이미지가 겹쳐져서 렌더될 경우 투명한 부분때문에 가려지는 경우도 있다. 
// 이를 완화시키는 방법으로 Desc.AlphaToCoverageEnable = true;로 설정한다.
// 
// Format? 
// 0~1값이기에 4바이트 전부를 안 쓴다. -> 3바이트 실수
// 나머지 1바이트는 스텐실(Stencil) 값. 스텐실 버퍼에서 특정 값을 가지는 픽셀을 선택해 색을 바꿀 수 있다.
// 옛날에 거울을 만들때 많이 사용했었다. 
// 
