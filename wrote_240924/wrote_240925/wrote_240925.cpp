// wrote_240925.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

// C++의 핵심 ... 함수, 변수, 클래스
// 프로그래밍 패러다임? 기준이 애매하고 미묘하다.
// 객체지향과 절차지향, 상호보완 관계에 있다.
// 클래스는 객체의 설계도, 클래스 자체가 실체는 아니다.
// 
// 클래스는 만능(?)이다. 뭔가 안된다면 누군가가 설정한것이다.
// 
// 실행되었을 때 메모리화된 개념을 개체라고 한다.
// 


//int도 일종의 클래스다.
//int Value = int();
//생성자, 객체를 만드는 함수.
// 규칙:
// 1.리턴값은 자기자신의 자료형. 따로 명시하지 않는다.
// 2.클래스와 완전히 이름이 똑같아야 한다. 
// 
// 생성자 
// 
//


//멤버함수
// 클래스 내부에 존재하는 전역함수다. 전역...클래스의 크기에 포함되지 않는다.(나중에 컴파일러가 바깥으로 빼낸다.)
// (사이즈 비교할 때 리턴값을 비교하는거와 착각하지 말기!)
// 이름앞에 클래스 :: 을 붙이는게 fullname. 그러나 생략가능하다.
// 첫번째 인자가 정해져 있다. 
// 
//멤버변수
// 객체기반이므로 '객체.'을 써야한다.
// 

int main()
{
    class Test
    {

        int intVal;
        bool boolVal;
    };

    //이때 Class의 사이즈는? 5바이트가 아닌 8바이트
    //바이트 패딩 규칙:
    //내부에서 가장 크기가 큰 녀석을 찾아 

    int ClassVal = sizeof(Test);
    
    return 0;
}

//Access Modifier?
//(접근 제한은 직접 지정하지 않으면 private로 되어 있다.) 
//

class Player
{ 
  // private: 과 Player()가 생략된 상태

    int Hp;
    int Att;

};
 
//공간 4가지......... Hp입장에서 생각해보면
// 
// 전역                      외부
// 함수내부                  외부
// 클래스 내부               내부
// 자식 클래스 내부           외부
// 
    Player.Hp; // private인데 외부에 있으니 이렇게 선언 불가

// 일반적으로
// 멤버변수는 공개 안하고, 멤버함수의 일부는 공개
// 
//


//Member변수 초기화 (Member initializer)
// 리터럴 초기화가 아닌 예전 방식의 초기화
//
// 

//오버로딩?
//이름은 같지만 인수가 다른 함수 어쩌구 하지만 정확하게 말하면 이름이 다르다. 컴파일러 수준에서 다르게 인식한다.
//주의: 리턴값은 이름에 포함되지 않는다. 즉, 리턴값을 바꾼다고 같은 이름의 함수를 오버로딩 할 수 없다.
//     (void Test{} int Test{} 이러면 에러난다.)
//

    void Test() // ::Test 테스트
    {

    }

    void Test(int _Value) // ::Test(int) 테스트int라고 읽자.
    {

    }
    // 둘 다 함수 이름이 Test인데 에러가 나지 않는다.


//This **매우 중요**
// 일반 멤버 함수의 첫번째 인자, 자기 자신을 가리키는 주소(포인터)를 말한다.
// (멤버변수에서만 사용 가능한 예약어)
// 직접 입력하지 않아도 자기 자신의 주소를 첫번째 인자로 넣어준다. 
//
    void Damage(/*player* const this,*/int _Att){}
               
//const를 어떻게 쓸까?
// 
// 멤버 함수 뒤에도 const를 쓸 수 있다. -> 멤버변수에 영향을 줄 수 없다.
// 일반 전역 함수에서는 쓸 수 없다. this가 있는 멤버함수에만 가능.
// 

//inline
// 전역에 붙일 수 있다.
// 가능하다면 함수 호출을 삭제하고 함수체를 복붙 시킨다.
// (함수 호출에 필요한 메모리를 최소화 하기 위한 문법)
// 기준이 뭔지는 굳이 알려고 하지 말자.

    inline int Test() // 함수 선언 (function head)
    {
       //함수체(function body) 
    }

//상속 

    
    
    
    
    
    

    