// wrote_241209 M.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    std::cout << "Hello World!\n";
}

// 오늘 한 것
// 
// Identity(항등행렬)
// 4x4 행렬을 이용한 FVector (x, y, z, w)의 크기변환, 이동
// 회전행렬 (x축, y축, z축) 
// 
// 행렬의 곱셈은 교환법칙이 성립하지 않으므로 
// 변환시 곱하는 행렬의 순서를 바꾸면 짐벌락(gimbal lock)이 발생할 수 있다.


// 사실 내가 만드는 게임의 세계와 화면에 보이는 세계는 별개다.
// 따라서 카메라 위치와 방향을 설정하지 않는 이상 화면에 게임이 보일지는 미지수다.
//  
// 뷰 스페이스... 카메라의 방향을 정하자.
// 카메라의 범위 안에 있는 것들만 화면에 나타날 수 있다.
// 
// 뷰행렬
// (바라보는 위치를 정하는 행렬)
// 뷰(카메라)위치가 월드의 중심(0, 0, 0)이, 카메라의 각도가 0이 되게 만드는 행렬이다.
// 
// 모든 월드의 메쉬에 뷰행렬을 가한다.
// 즉 모든 메쉬의 위치에서 카메라의 위치를 빼고
// 모든 메쉬를 카메라의 각도만큼 돌려준다. 
// 
// 뷰행렬을 쓰는 이유?
// 모든 사물이 카메라를 중심으로 위치가 바뀌니
// 투영행렬과 컬링(화면에 나올 물체를 정하는 것)이 편해진다.


// 투영행렬
// 카메라가 바라보는 범위의 넓이를 정하는 행렬
// 
// 
// 

