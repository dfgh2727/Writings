// wrote_250507 W.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//



// 기소서는 사람에 따라 의견이 갈리므로 많은 사람들의 피드백을 받자
// 50페이지를 넘기지 말자. 면접관들도 피로한 상태다.

// 언리얼에서 어떤 내용을 적으면 될까?
// 
// 자신의 스타일을 보여주자.
// 언리얼의 ~기능을 사용했다 -> (X)
// 언리얼의 ~기능을 어떤 이유로 사용했는가 -> (O)
// 
// 언리얼의 기본 클래스들을 설명할 필요 없다.
// 단 기본 클래스를 상속받아 만든 나만의 클래스는 설명하자.
// 예) AActor를 상속받은 CookingTable은 ...
// 
// 네트워크 관계는 설명하자.
// 
// 블루프린트 이미지를 첨부할 경우 핵심적인 노드만 올리자.
// 
// 결론: 자기가 한 것과 아닌 것을 잘 구분해서 쓸 필요가 있다.



// API, DirectX 프로젝트 
// 
// API, DX는 프로젝트 구성도 쓸 수 있다. 
// 직접 구현한 것이기에 기소서에 쓸 수 있다.
// (EngineBase, EnginePlatform, EngineCore...)
// 
// 위와 같이 구분한 이유가 무엇인가 ... dll, lib 구현을 위해서다.
// (이 경우 dll, lib에 대한 질문도 당연히 따라온다.)
// 어떤 단어를 사용한 경우 그에 대한 질문을 할 확률이 높다.
// 
// 미리 컴파일된 헤더를 사용하는 것도 쓸 수 있다. 
// 핵심 클래스, 인터페이스도 쓸 수 있다.
// 단, 면접에서 설명가능해야 한다.
// 
// 어떤 기능을 소개하면 어디에서 사용했는지 써야한다.
// 가령 EngineDirectory에 대해 쓴다면 
// ...
// UEngineDirectory CurDir;
// CurDir.MoveParentToDirectory("EngineShader");
// ...와 같이 사용 예시를 보여줘야 한다.
// 
// DX11을 초기화 한 것도 기술이다. 
// 단, 렌더 타켓, 라이팅, 쉐이더, 행렬...등에 대해 설명할 수 있어야 한다.
// 
// 엔진구조에 대해 쓰게 되면 이론 위주의 문답이 오고가게 되니
// 엔진보다 컨텐츠 위주로 기소서를 쓰는 것이 유리하다.
// 엔진은 기본적인 개념을 숙지하고 있는 것이 좋다. 
// 


// 객체지향 설계 = OOP
// 
