// wrote_241212.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

// (프레임 워크 만들기, 어제에 이어서... )
// 
// 확인할 수 없는 외부기호( = cpp의 내용을 모른다)
// 
// 1. 함수 선언만하고 구현 안 함
// 2. lib나 dll을 사용하겠다고 선언하지 않음
// 3. 프로젝트 참조하기로 했으나 참조 안 함
//    (lib의 경우 pragma comment를 쓰지 않는다던가)
// 
// 왜 발생할까?
// 

// dll?
// 
// dll은 lib에 비해 사용하기 까다롭지만 한번만 로드된다는 장점이 있다.
// lib는 사용되는 곳마다 로딩된다. 따라서 중복되어 메모리를 낭비하기 쉽다.
// 
// lib가 dll보다 용량이 훨씬 작다면 
// 보통 dll의 모든 내용을 가진게 아니라 다른 무언가를 통해 내용을 쓸 수 있게끔 만들어진 경우가 많다.
//
// dll은 프로젝트와 개별적으로 존재한다. 즉 분리된 다른 코드 영역에 존재한다.
// 따라서 잘 설계하면 중간에 코드를 바꿀 수 있다는 장점이 있다.
// (파일 실행중에, 그리고 디버깅 중에 코드 내용을 변경해서 바로 적용할 수 있다.)
// 
// 게임 엔진 대부분은 dll을 사용한다.
//

// dll을 로드하는 방법을 알아보자.
// 
// 1. 동적 로딩
// 2. 정적 로딩
// 
// 동적 로딩
// : LoadLibrary함수를 통해 로딩한다.
// 
// 정적 로딩
// : 파일로써 로딩한다.
// 
//   dll로 로딩하고 싶은 클래스의 함수에 __declspec(dllexport)쓰기 (언리얼에선 define으로 사용)
//   -> dll을 로드할 수 있는 lib 생성
//   그리고 pragma comment(lib, "~.h")를 쓴다.
// 
// 
