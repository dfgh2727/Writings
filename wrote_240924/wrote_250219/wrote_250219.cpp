// wrote_250219.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>


// FBX
// 3D맥스에서 사용하는 매쉬 파일 포맷.
// 가변성이 굉장히 높은 포맷. 애니메이션이 함께 있을 수 있다.
// (이펙트 등은 FBX가 아니다.
//  이펙트 관련 에셋들은 언리얼과 유니티가 서로 호환이 안 된다.)
// 
// 언리얼은 FBX, OBJ(예전 방식)가 임포트 가능하다.
// 
// 스켈레탈 매쉬: 본과 정점을 가진다.
// 피직스 에셋: 언리얼이 매쉬를 기반으로 만들어 주는 충돌을 위한 에셋
// 스켈레톤: 애니메이션용 뼈대. 없으면 애니메이션을 사용할 수 없다.
// 
// 애니메이션
// 본 그리고 본과 연결된 매쉬가 움직이는 현상.
// 본은 일종의 로컬 행렬이다. 사물의 위치, 회전에 대한 정보를 담고 있다.
// 이런 여러 행렬이 곱해지면 최종 애니메이션이 나온다.
// 
// 애니메이션을 전담하는 FBX가 따로 있는게 요즘 트렌드다. 
// 
// 프로젝트간에 리소스를 이동시킬 때 ctrl C+V로 하면 문제가 생긴다.
// 반드시 이주로 위치를 바꾸자.
// 
// Built-in data
// 미리 계산 결과(빛, 물리, 충돌체 등)가 모여 있는 것.
// 용량이 큰 편이며 빌드를 실행하면 생긴다.
// 레벨이 열릴 때 다시 계산하지 않아도 되어 빠르게 에디터가 빠르게 실행할 수 있게 만든다.
// 
// 지오메트리 = 맵의 충돌체
// 


// ******언리얼에서 본격적인 프로젝트 만들기******
 
// 블루프린트 다루기...
// 
// 에셋 이름을 기준으로 검색하면 찾을 수 있다.
// 대신 다른 폴더에서 같은 이름으로 만들어진 에셋이 있다면 
// 아마도...최신에 만든 것으로 연결될 것이다.
// 
// 언리얼의 정석적인 이동이 아니라면 버그가 발생될 위험이 있다.
// (다른 프로젝트간에 ctrl C+V하지 않기!)
// 
// alt를 누르고 선을 누르면 연결을 끊을 수 있다.
// 
// 원하는 노드를 범위로 선택 - 멘트 생성
// 이렇게 코멘트로 묶인 노드들은 세트가 되어 움직일 수 있다.

// C++로 클래스를 만들어보자.
UCLASS()
class /*프로젝트명_API*/ ATilteGamemode::

// 블루프린트 노드를 더블클릭하면 코드를 볼 수 있다.
// 확인해보면...OpenLevel이라는 함수를 확인할 수 있다. 
// (OpenLevel은 모듈이 엔진이므로 따로 무언가를 설치할 필요 없다.)
// 
// 그럼 delay도 같은 방식으로 구현할 수 있을까?
// 좀 다르다.
// 언리얼에 TimeManager라는게 있긴 하지만 쓰레드로 돌아가기 때문에
// 잘못하면 터진다.
// 
// TFunction을 사용해보자. (std::function과 유사하다.)
// 
// 언리얼의 TArray는 std::vector와 다르게 중간의 요소를 삭제할 수 있다.
// 
// C++에서 컴포넌트를 만들때 아무런 처리도 안 하면 디테일이 나오지 않는다.
// ( = 세부정보가 나오지 않음)
// 처리를 안 할시 언리얼의 빌드툴은 컴포넌트를 블루프린트에서 사용하지 않을 것이라고 인식한다.
// 인식을 위해서 헤더에 멤버변수로 만들어주고 UProperty를 지정해야 한다. 


// HUD
// 
// 언리얼의 HUD는 위젯이라는 개념을 기반으로 실행된다.
// 렌더링 경로가 아예 별개인 존재다.
// 단, UUserWidget을 상속받는 클래스가 필요하다.
// 
// 언리얼의 UI면에서 그딱 좋은 에디터는 아니다.
//
// 블루 프린트에서 게임모드 레벨과 무관하게 CrateWidget이 가능하다.
// UI는 Hud가 클래스에서 관래주는 게 맞지만 블프로 어디서든 CreateWidget이 가능하다
//
// 위젯을 만든다고 화면에서 그냥 보이는게 아니다.
// WBP(Widget Blue Print)를 블루 프린트에서 Add ViewPort에 연결시켜서 화면에 나타나게 만들자.
// (블루프린트에 있는 함수는 대부분 C++에도 있다. NewWidget->AddToViewPort();)
// 위젯은 블루프린트로 만드는게 편하다. 이벤트 바인딩이 쉽기 때문이다.
// 
// 디테일 - '변수여부'를 체크해야 
// 이벤트를 지정할 수 있다. 


// ...위젯을 디자인 해보자.
// 
// 위젯은 계층구조를 가진다. 
// 언리얼은 위젯이 여러개 있을 때 위치를 조율하기 위해 '부모 == 패널계열'이라는 제한을 걸어놨다.
// 즉, 패널 아래 위젯이 여러개 있는 구조가 된다.
// 
// 계층구조에 버튼을 드래그 해보자.
// 일반적으로 위젯 아래에 자식이 여럿 있을 수 없다. 
// 이미 버튼을 추가했다면 다시 버튼을 드래그 할 때 '위젯이 자손을 가질 수 없다'는 안내문이 나온다.
// 
// 계층구조 - 다음으로 랩핑 - 캔버스 패널 (원하는 패널) 선택
// 그 후 버튼을 여러개 추가할 수 있다. 
// 
// 계층구조 - 버튼을 선택 후 - 오른쪽의 디테일 - 슬롯에서
// 앵커로 버튼의 위치를 조절하고 버튼의 크기를 정할 수 있다. 
// 패널은 위치 조절을 위한 것일 뿐 실제 크기라는 건 없다. 화면을 완전히 채우고 있을 뿐.

