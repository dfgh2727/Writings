// wrote_241105.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    std::cout << "Hello World!\n";
}

// (API)
// 픽셀 충돌
// 픽셀 충돌은 타일맵 충돌과 동일하다.
// 
// 충돌할 부분은 남기고 다 지우기
// 충돌할 부분은 검은색 처리 
// 
// UColor GetPixel(FVector2D _Point)
// 특정 색깔의 위치를 가져온다. 
// 
// 
// 이미지 시작점을 (0,0)으로 지정하는걸 습관으로 들이자.
// 

// :: 윈도우의 함수인지 엔진의 함수인지 혼동할 수 있다. 따라서 꼭 써야한다.

// FSM
// :유한 상태 기계
// 
// 한번에 두 가지 상태가 동시에 존재할 수 없다.
// 한 가지 상태에 한 가지 함수만 존재한다.
// (HFSM... FSM 안에 또 다른 FSM이 존재한다. 보통 감정표현과 행동을 중첩 시킬때 쓴다.)
// 
// 지금 만드는 API는 FSM에서 벗어나지 말 것.
// 
// Idle 
// 가만히 있는 상태. but 전이에 대한 판단은 해야 한다.
// 
// 상태를 바꾸고 return하지 않으면 중첩된 상태로 존재하게 된다.
// 반드시 return해야 한다.
// 
// if문 중첩도 최대한 피하는게 좋다.
// 
// Gravity()와 같은 상태 함수
// switch안에 넣어서 모든 상태의 기본값으로 넣지 말기.
// 따로 만들어라. (아니면 의미를 잘 파악하기.)
// 
// start 체크
// 
// beginPlay 할 때도 Idle로 시작하게 설정
//

// (EngineBase)
// FSM StateManager
// 
// 상태는 곧 함수. 
// 함수를 변수처럼 쓰게 functional사용
// 
// 함수포인터를 사용하거나 람다를 사용하거나.
//

// 람다
// 즉석 함수 만들기
// 
// [] 람다 캡쳐
// [=]을 하면 복사한다. 즉, 내부에서 바꿔도 외부에 반영되지 않을 수 있다.
// (int value1;
//  int value2 = value1;
//  value2 = 30;
//  이런다고 value1이 30이 되진 않으니까.)
// 
// [&]참조형으로 내부에서 사용.
// 
// this 못 쓴다. 멤버함수가 아니기 때문에.
// 쓰고 싶다면 [this]를 해주자. 
// 
// [this]
// 일반적인 지역변수는 사용할 수 없다.

// (contents object)
// Score
// 
// 
// 
// (CameraEffect 는 만질필요 없다. 고양이 마리오는 해당사항이 아니다.)
// 

// 파괴되지 않는 Actor들을 모아놓은 list를 만들자!
// (언리얼은 무조건 Actor가 level에 묶여있다. )
// (유니티는 DontDestroy)
// 
//
//

