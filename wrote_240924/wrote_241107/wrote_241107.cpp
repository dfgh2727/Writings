// wrote_241107.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>

int main()
{
    std::cout << "Hello World!\n";
}

// (EngineCore/EngineCoreDebug)
// 
// CoreDebugPos()
// 원하는 점을 호출해서 볼 수 있다.
// 
// 
// Ellipse()
// 원을 그려주는 함수
// 첫번째 인자는 HDC니까 ->GetDC()
// 
// AActor의 Tick에 구현,
// (EngineCoreDebug 헤더 추가 필요)
// 
// 모든 디버그 출력이 완료되면 clear 되게 만들었다. 

// GetActorLocation이란 무언인가...
// 
// 원할 때 플레이어의 위치를 보고 싶다면 IsDebug 를 true로 만들자.
// DebugOn(), DeBugOff() 를 호출해서 껐다 켰다...
// 
// 마리오 위치는 100,100인데 왜 가운데에 렌더될까?
// 실제 렌더 위치는 다르다.
// 
// 렌더링 기준이 윈도우창에 맞춰져 있다. 
// (내가 생각하는) 게임세상의 0,0은 어디인지 알아야 한다.
// 
// 게임엔진을 처음부터 만들때 정하는 두 가지.
// - 1의 단위가 무엇인가 
//  (언리얼은 100pixel을 1로 정한다.)
// - (0,0)이 어디인가.
// 
// 윈도우 창은 움직이지 않는다. 
// 게임맵이 움직여서 윈도우창에 플레이어가 보인다.
// 
// 최종적으로 CopyTrans를 해야
// 플레이어 위치와 카메라 위치를 받아온다.
// 플레이어 위치 - 카메라 위치 = 그려지는 위치
 
// FVector2D
// 크기와 방향
// 
// 점프는 벡터의 합성으로 만든다.
// 
// 가로 이동 (1,0), 세로 이동 (0,1)이라고 생각했을때
// 동시에 실행해서 대각선으로 이동한다면... 크기는 1보다 크다. 더 빠른 이동이 되었다.
// 이동량을 전부 같게 만들고 싶다 -> 정규화
// 단위원을 이용한다.
// 
// (대각선 이동이 없음...정규화 필요 없을듯)
// 
// 제곱근 sqrt()를 사용해 구한다.
// noramlize할 때는 보통 멤버변수용과 static 두 가지를 만든다.
// normalize하면 나온 값을 반드시 값을 확인해야 한다.
// 

// 게임 속 중력은 상시 적용되지 않는다. (게임적 허용...)
// 
// 떨어질 때 점점 빠르게 떨어져야 하니 Gravity(float _DeltaTime)
//

// 충돌
// 
// 시점함수 방식(이벤트 방식)과 직접 호출 방식으로 나뉜다.
// (선생님은 직접 호출 방식을 좋아한다)
// 
// 시점함수...엔진에 편입되서 계속 돌려진다. 
// void Collision()
// {
//     if (공격중이 아니라면), if (임팩트 순간이 아니라면)...
// }
// 조건이 많아진다.
// (이벤트 방식은 만들되 꺼놓을 것.)
// 
// 충돌체의 order는 의미가 약간 다르다.
// 
// 충돌체들은 설정을 해줘야 한다. (그룹을 만든다. PlayerAttack과 MonsterBody, ...)
// 그렇지 않으면 모든 그룹과 충돌하게 된다.
// 
// Component Tick은 Actor(부모)를 호출해야 가능하다.
//