// wrote_250113 M.cpp : 이 파일에는 'main' 함수가 포함됩니다. 거기서 프로그램 실행이 시작되고 종료됩니다.
//

#include <iostream>


// UI
// 
// 결론부터 말하자면
// 텍스쳐 타겟(play 타겟) + UI 타겟 -> 최종 타겟 -> 백버퍼
// 위와 같은 구조로 만든다.
// 
// 포스트 프로세싱...화면 전체에 영향을 미치는 효과
// 영향을 미치는 범위를 정하고 싶어서 텍스처와 UI를 나눠서 만든다.
// (반드시 둘로 나눠야 하는 것이 아니다. 원하는 목적이 있다면 타겟은 얼마든지 만들 수 있다.)
// 
// 앞으로 렌더타겟을 관리하는 클래스를 만들고
// 필요할 때 마다 렌더타겟을 만든다.
// (예: DepthTex)
// 
// BackBufferTarget = (DXBackBufferTarget) + RTV + DepthTarget
// LastRenderTarget ... 모든 카메라가 바라본 이미지를 통합한 타겟
// 
// OMSetRenderTarget()
// 이 함수가 있어야 Render가 가능하다.
// 
// SetClearColor 백퍼버 색을 정하자.
// 
// 이번에도 기능은 크게 안 바뀐다. 단지 클래스를 만들고 함수들을 정리했을 뿐
// 
// ...플레이 화면과 UI 공간을 분리했다.
// 
// 이제 타겟들에 그려진 것들을 통합해보자.
// CopyTo(_Target) ... Target을 한번 지우고 다른 렌더타겟의 요소를 복붙한다.
// MergeTo(_Target) ... 합친다.
// 
// 포스트 프로세싱...
// 특정 카메라 한정으로 PostEffect()를 실행시키거나
// 아니면 LastRenderTarget()(완전히 통합된 화면)에 효과를 주거나...
// 
// 인스턴싱을 안 하면 렌더되는 과정을 전부 다 나눠서 볼 수 있다.
// 
// 카메라... 벗어나서 만들어라?
// 
// UI 카메라는 절대 안 움직이게 설정.
// (언리얼은 UI를 관리하는 클래스가 따로 있다.-> widget)
//
// HUD 
// (게임플레이 도중 화면에 오버레이되는 상태와 정보)

//  
// 
// 
//


